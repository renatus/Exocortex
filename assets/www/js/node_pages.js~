$(document).on('click','.button_activities_main',function(){
    get_node_list("/json/activities/today", "#page_node_pages_list");
});

$(document).on('click','.button_activities_tomorrow',function(){
    get_node_list("/json/activities/tomorrow", "#page_activities_tomorrow_list");
});

$(document).on('click','.button_activities_future',function(){
    get_node_list("/json/activities/future", "#page_activities_future_list");
});

$(document).on('click','.button_activities_past',function(){
    get_node_list("/json/activities/past", "#page_activities_past_list");
});

$(document).on('click','.button_activities_low-prio',function(){
    get_node_list("/json/activities/low-prio", "#page_activities_low-prio_list");
});

$(document).on('click','.button_activities_high-prio',function(){
    get_node_list("/json/activities/high-prio", "#page_activities_high-prio_list");
});

$(document).on('click','.button_activities_completed',function(){
    get_node_list("/json/activities/completed", "#page_activities_completed_list");
});

$(document).on('click','.button_activities_postponed',function(){
    get_node_list("/json/activities/postponed", "#page_activities_postponed_list");
});

$(document).on('click','.button_activities_waiting',function(){
    get_node_list("/json/activities/waiting", "#page_activities_waiting_list");
});


function get_node_list(URLpart, UlHtmlElementId) {
    try {
        $.ajax({
            url: backendDomain + URLpart,
            type: 'get',
            dataType: 'json',
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert('page_tasks_main - failed to retrieve pages');
                console.log(JSON.stringify(XMLHttpRequest));
                console.log(JSON.stringify(textStatus));
                console.log(JSON.stringify(errorThrown));
            },
            success: function (data) {
                $(UlHtmlElementId).html("");
                $.each(data.nodes,function (node_index,node_value) {
                    console.log(JSON.stringify(node_value));
                    $(UlHtmlElementId).append($("<li></li>",{"html":"<a href='#page_node_view' id='" + node_value.node.nid + "' class='page_node_pages_list_title'>" + node_value.node.title + "</a>"}));
                });
                $(UlHtmlElementId).listview("destroy").listview();
            }
        });
    }

    catch (error) { alert("page_tasks_main - " + error); }
};



$(document).on('click','a.page_node_pages_list_title',function(){
    nodeID = $(this).attr('id');
    URLpart = "/rest/node/" + encodeURIComponent(nodeID) + ".json"
    
    //datetime_planned-value-date = 
    //alert($("#page_node_view" + " " + ".content").html(data.body.en.[0].safe_value));
    //alert($("#page_node_view" + " " + ".content").html(data.body.en.safe_value));
    
    get_activity(URLpart, "#page_node_view", ".content", nodeID);
});



function get_activity(URLpart, HTMLpageID, ContentHtmlElementClass, nodeID) {
    try {
        $.ajax({
            url: backendDomain + URLpart,
            type: 'get',
            dataType: 'json',
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert('page_node_view - failed to retrieve page node');
                console.log(JSON.stringify(XMLHttpRequest));
                console.log(JSON.stringify(textStatus));
                console.log(JSON.stringify(errorThrown));
            },
            success: function (data) {
                console.log(JSON.stringify(data));
                
                //console.log(data["body"][data.language][0]["safe_value"]);
                //alert(data["field_priority"]["und"][0]["value"]);
                //alert(data.field_datetime_planned.und[0].value);
                
                //Date field raw value is like this: "2013-05-29 01:22:55"
                //Date field returns time in UTC timezone, not in timezone time was saved
                //[{"value":"2013-07-04 16:00:48","value2":"2013-07-09 16:00:10","timezone":"Europe/Moscow","offset":"14400","offset2":"14400","timezone_db":"UTC","date_type":"datetime"}]
                if(typeof data["field_datetime"]["und"] === "undefined") {
                    var fieldDateTimeValue = [];
                    fieldDateTimeValue[0] = "";
                    fieldDateTimeValue[1] = "";
                } else {
                    //alert(Date.parse("2013-05-29 01:22:55"));
                    timezoneOffset = data["field_datetime"]["und"][0]["offset"] * 1000;
                    //Parse Date string and create Date object with that string's value, and apply timezone offset to it
                    nodeDateTime = new Date(Date.parse(data["field_datetime"]["und"][0]["value"]) + timezoneOffset);
                    var fieldDateTimeValueLocalized = nodeDateTime.getFullYear() + '-' + 
                                                      //Months numbers counts from 0, not from 1
                                                      ("0" + (nodeDateTime.getMonth() + 1)).slice(-2) + '-' + 
                                                      ("0" + nodeDateTime.getDate()).slice(-2) + ' ' + 
                                                      ("0" + nodeDateTime.getHours()).slice(-2) + ':' +
                                                      ("0" + nodeDateTime.getMinutes()).slice(-2) + ':' +
                                                      ("0" + nodeDateTime.getSeconds()).slice(-2);
                
                    var fieldDateTimeValue = fieldDateTimeValueLocalized.split(" ");
                }
                
                if(typeof data["field_datetime_planned"]["und"] === "undefined") {
                    var fieldDateTimePlannedValue = [];
                    var fieldDateTimePlannedValue2 = [];
                    fieldDateTimePlannedValue[0] = "";
                    fieldDateTimePlannedValue[1] = "";
                    fieldDateTimePlannedValue2[0] = "";
                    fieldDateTimePlannedValue2[1] = "";
                } else {
                    //alert(Date.parse("2013-05-29 01:22:55"));
                    timezoneOffset = data["field_datetime_planned"]["und"][0]["offset"] * 1000;
                    //Parse Date string and create Date object with that string's value, and apply timezone offset to it
                    nodeDateTimePlanned = new Date(Date.parse(data["field_datetime_planned"]["und"][0]["value"]) + timezoneOffset);
                    var fieldDateTimePlannedValueLocalized = nodeDateTimePlanned.getFullYear() + '-' + 
                                                      //Months numbers counts from 0, not from 1
                                                      ("0" + (nodeDateTimePlanned.getMonth() + 1)).slice(-2) + '-' + 
                                                      ("0" + nodeDateTimePlanned.getDate()).slice(-2) + ' ' + 
                                                      ("0" + nodeDateTimePlanned.getHours()).slice(-2) + ':' +
                                                      ("0" + nodeDateTimePlanned.getMinutes()).slice(-2) + ':' +
                                                      ("0" + nodeDateTimePlanned.getSeconds()).slice(-2);
                    var fieldDateTimePlannedValue = fieldDateTimePlannedValueLocalized.split(" ");
                    
                    //Parse Date string and create Date object with that string's value, and apply timezone offset to it
                    nodeDateTimePlanned2 = new Date(Date.parse(data["field_datetime_planned"]["und"][0]["value2"]) + timezoneOffset);
                    var fieldDateTimePlannedValue2Localized = nodeDateTimePlanned2.getFullYear() + '-' + 
                                                       //Months numbers counts from 0, not from 1
                                                       ("0" + (nodeDateTimePlanned2.getMonth() + 1)).slice(-2) + '-' + 
                                                       ("0" + nodeDateTimePlanned2.getDate()).slice(-2) + ' ' + 
                                                       ("0" + nodeDateTimePlanned2.getHours()).slice(-2) + ':' +
                                                       ("0" + nodeDateTimePlanned2.getMinutes()).slice(-2) + ':' +
                                                       ("0" + nodeDateTimePlanned2.getSeconds()).slice(-2);
                    var fieldDateTimePlannedValue2 = fieldDateTimePlannedValue2Localized.split(" ");
                
                
                    //var fieldDateTimePlannedValue = data["field_datetime_planned"]["und"][0]["value"].split(" ");
                    //var fieldDateTimePlannedValue2 = data["field_datetime_planned"]["und"][0]["value2"].split(" ");
                }
                
                                                
                $(HTMLpageID + " h1").html(data.title); // set the header title
                $(HTMLpageID + " #page_activity_planned_date").html("<p>Planned from: " + fieldDateTimePlannedValue[0] + " " + fieldDateTimePlannedValue[1] + 
                                                                    " to: " + fieldDateTimePlannedValue2[0] + " " + fieldDateTimePlannedValue2[1] + "</p>");
                $(HTMLpageID + " #page_activity_start_date").html("<p>From: " + fieldDateTimeValue[0] + " " + fieldDateTimeValue[1] + "</p>");
                $(HTMLpageID).attr("data-nid", nodeID);
                $(HTMLpageID).attr("data-datetime-value-date", fieldDateTimeValue[0]);
                $(HTMLpageID).attr("data-datetime-value-time", fieldDateTimeValue[1]);
                $(HTMLpageID).attr("data-datetime_planned-value-date", fieldDateTimePlannedValue[0]);
                $(HTMLpageID).attr("data-datetime_planned-value-time", fieldDateTimePlannedValue[1]);
                $(HTMLpageID).attr("data-datetime_planned-value2-date", fieldDateTimePlannedValue2[0]);
                $(HTMLpageID).attr("data-datetime_planned-value2-time", fieldDateTimePlannedValue2[1]);
                $(HTMLpageID).attr("data-difficulty-value", data["field_difficulty_planned"]["und"][0]["value"]);
                //alert(data["field_difficulty"]["und"][0]["value"]);
                //$(HTMLpageID + " " + ContentHtmlElementClass).html("<p>ttt</p>");
                //alert(typeof data["body"][data.language]);
                //console.log(JSON.stringify(data["body"]));
                if(typeof data["body"][data.language] === "undefined") {
                    $(HTMLpageID + " " + ContentHtmlElementClass).html(" ");
                } else {
                    $(HTMLpageID + " " + ContentHtmlElementClass).html(data["body"][data.language][0]["safe_value"]); // display the body in the content div
                }
            }
        });
    }
    catch (error) { alert("page_node_view - " + error); }
};




//$(document).on('click','#button_start_date',function(){
//    nodeID = $("#page_node_view").attr("data-nid");
//    URLpart = "/rest/node/" + encodeURIComponent(nodeID) + ".json"
//    edit_activity_date(URLpart);
//});



$(document).on('click','#button_end_date',function(){
    //nid = $(this).attr('id');
    nodeID = $("#page_node_view").attr("data-nid");
    URLpart = "/rest/node/" + encodeURIComponent(nodeID) + ".json"
    
    curTimestamp = new Date();
    var curDate = curTimestamp.getFullYear() + '-' + ("0" + (curTimestamp.getMonth()+1)).slice(-2) + '-' + ("0" + curTimestamp.getDate()).slice(-2);
    var curTime = ("0" + curTimestamp.getHours()).slice(-2) + ':' + ("0" + curTimestamp.getMinutes()).slice(-2) + ':' + ("0" + curTimestamp.getSeconds()).slice(-2);
    //var curDate = "2013-05-30";
    //var curTime = "23:00:07";
    //var timeZoneName = "Europe/Moscow";
    var plannedDifficultyValue = $("#page_node_view").attr("data-difficulty-value");
    var timeZone = jstz.determine(); //Determines the time zone of the browser client
    timeZoneName = timeZone.name();

//alert(typeof $("#page_node_view").attr("data-datetime-value-date"));

    if($("#page_node_view").attr("data-datetime-value-date")) {
        var startDate = $("#page_node_view").attr("data-datetime-value-date");
        var startTime = $("#page_node_view").attr("data-datetime-value-time");
    } else {
        var startDate = curDate;
        var startTime = curTime;
    }

//startDate = "2013-05-30";
//startTime = "23:00:07";

//write field_datetime start choice!!!!


    if($("#page_node_view").attr("data-datetime_planned-value-date")) {
        var fieldDateTimePlannedData = '&node[field_datetime_planned][und][0][value][date]=' + $("#page_node_view").attr("data-datetime_planned-value-date") +
                                       '&node[field_datetime_planned][und][0][value][time]=' + $("#page_node_view").attr("data-datetime_planned-value-time") +
                                       '&node[field_datetime_planned][und][0][value2][date]=' + $("#page_node_view").attr("data-datetime_planned-value2-date") +
                                       '&node[field_datetime_planned][und][0][value2][time]=' + $("#page_node_view").attr("data-datetime_planned-value2-time");
    } else {
        var fieldDateTimePlannedData = '';
    }


    //data: 'node[type]=activity&node[language]=en&node[title]=' + encodeURIComponent(title) +
    //'&node[field_datetime_planned][und][0][value][date]=' + curDate +
    //'node[field_datetime][und][0][value][date]=' + curDate +
    //'&node[field_datetime][und][0][value][time]=' + curTime +
    var dataToSend = 'node[field_datetime][und][0][value][date]=' + startDate +
                     '&node[field_datetime][und][0][value][time]=' + startTime +
                     //Without [show_todate] argument Drupal Date will not save end date in case you don't have end date in DB yet
                     '&node[field_datetime][und][0][show_todate]=1' +
                     '&node[field_datetime][und][0][value2][date]=' + curDate +
                     '&node[field_datetime][und][0][value2][time]=' + curTime +
                     '&node[field_datetime][und][0][timezone][timezone]=' + timeZoneName +
                     
                     //'&node[field_datetime_planned][und][0][value][date]=' + $("#page_node_view").attr("data-datetime_planned-value-date") +
                     //'&node[field_datetime_planned][und][0][value][time]=' + $("#page_node_view").attr("data-datetime_planned-value-time") +
                     //'&node[field_datetime_planned][und][0][value2][date]=' + $("#page_node_view").attr("data-datetime_planned-value2-date") +
                     //'&node[field_datetime_planned][und][0][value2][time]=' + $("#page_node_view").attr("data-datetime_planned-value2-time") +
                     
                     fieldDateTimePlannedData +
                     '&node[field_difficulty][und][' + plannedDifficultyValue + ']=' + plannedDifficultyValue +
                     '&node[field_task_status][und][completed]=completed';
    
    edit_activity_date(URLpart, dataToSend);
});








$(document).on('click','#button_start_date',function(){
    //nid = $(this).attr('id');
    nodeID = $("#page_node_view").attr("data-nid");
    URLpart = "/rest/node/" + encodeURIComponent(nodeID) + ".json"
    
    //var curDate = "2013-05-30";
    //var curTime = "23:00:07";
    //var timeZoneName = "Europe/Moscow";
    curTimestamp = new Date();
    var curDate = curTimestamp.getFullYear() + '-' + ("0" + (curTimestamp.getMonth()+1)).slice(-2) + '-' + ("0" + curTimestamp.getDate()).slice(-2);
    var curTime = ("0" + curTimestamp.getHours()).slice(-2) + ':' + ("0" + curTimestamp.getMinutes()).slice(-2) + ':' + ("0" + curTimestamp.getSeconds()).slice(-2);
    
    var timeZone = jstz.determine(); //Determines the time zone of the browser client
    timeZoneName = timeZone.name();



    var startDate = curDate;
    var startTime = curTime;


//write field_datetime start choice!!!!

    //data: 'node[type]=activity&node[language]=en&node[title]=' + encodeURIComponent(title) +
    //'&node[field_datetime_planned][und][0][value][date]=' + curDate +
    //'node[field_datetime][und][0][value][date]=' + curDate +
    //'&node[field_datetime][und][0][value][time]=' + curTime +
    

    
    if($("#page_node_view").attr("data-datetime_planned-value-date")) {
        var fieldDateTimePlannedData = '&node[field_datetime_planned][und][0][value][date]=' + $("#page_node_view").attr("data-datetime_planned-value-date") +
                                       '&node[field_datetime_planned][und][0][value][time]=' + $("#page_node_view").attr("data-datetime_planned-value-time") +
                                       '&node[field_datetime_planned][und][0][value2][date]=' + $("#page_node_view").attr("data-datetime_planned-value2-date") +
                                       '&node[field_datetime_planned][und][0][value2][time]=' + $("#page_node_view").attr("data-datetime_planned-value2-time");
    } else {
        var fieldDateTimePlannedData = '';
    }
    
    //In case Drupal Date field already hase both start and end values stored, you have to send both value and value2
    var dataToSend = 'node[field_datetime][und][0][value][date]=' + startDate +
                     '&node[field_datetime][und][0][value][time]=' + startTime +
                     '&node[field_datetime][und][0][timezone][timezone]=' + timeZoneName +
                     //'&node[field_datetime][und][0][value2][date]=' + curDate +
                     //'&node[field_datetime][und][0][value2][time]=' + curTime +
                     
                     //'&node[field_datetime_planned][und][0][value][date]=' + $("#page_node_view").attr("data-datetime_planned-value-date") +
                     //'&node[field_datetime_planned][und][0][value][time]=' + $("#page_node_view").attr("data-datetime_planned-value-time") +
                     //'&node[field_datetime_planned][und][0][value2][date]=' + $("#page_node_view").attr("data-datetime_planned-value2-date") +
                     //'&node[field_datetime_planned][und][0][value2][time]=' + $("#page_node_view").attr("data-datetime_planned-value2-time") +
                     
                     fieldDateTimePlannedData +
                     '&node[field_task_status][und][active]=active';
                 

    
    edit_activity_date(URLpart, dataToSend);
    
    $("#page_node_view #page_activity_start_date").html("<p>From: " + startDate + " " + startTime + "</p>");
    //We have to set HTML properties with Date Field start date and time
    //Otherwise start date and time will be overwritten by button_end_date in case we haven't reload this Activity page
    $("#page_node_view").attr("data-datetime-value-date", startDate);
    $("#page_node_view").attr("data-datetime-value-time", startTime);
});










function edit_activity_date(URLpart, dataToSend) {
    var servicesToken = getServicesToken(backendDomain);
    //var title = "Check-in";
    //curTimestamp = new Date();
    //var curDate = curTimestamp.getFullYear() + '-' + ("0" + (curTimestamp.getMonth()+1)).slice(-2) + '-' + ("0" + curTimestamp.getDate()).slice(-2);
    //var curTime = ("0" + curTimestamp.getHours()).slice(-2) + ':' + ("0" + curTimestamp.getMinutes()).slice(-2) + ':' + ("0" + curTimestamp.getSeconds()).slice(-2);
    ////var curDate = "2013-05-30";
    ////var curTime = "23:00:07";
    //var plannedDifficultyValue = $("#page_node_view").attr("data-difficulty-value");

alert(dataToSend);

    $.ajax({
        url: backendDomain + URLpart,
        type: 'put',
        beforeSend: function (request) {
            request.setRequestHeader("X-CSRF-Token", servicesToken);
        },
        //data: 'node[type]=activity&node[language]=en&node[title]=' + encodeURIComponent(title) +
              //'&node[field_datetime_planned][und][0][value][date]=' + curDate +
        data: dataToSend,
              
        dataType: 'json',
        error: function(XMLHttpRequest, textStatus, errorThrown) {
            alert('page_node_update_submit - failed to update node');
            console.log(JSON.stringify(XMLHttpRequest));
            console.log(JSON.stringify(textStatus));
            console.log(JSON.stringify(errorThrown));
        },
        success: function (data) {
            alert("Activity updated!");
            $.mobile.changePage("#page_node_view", "slideup");
        }
    });
    return false;
};


$(document).on("click", "#button_node_edit", function(){
    nid = $(this).attr("data-nid");
    alert(nid);
});

$(document).on("click", "#button_node_delete", function(){
    nid = $("#page_node_view").attr("data-datetime_planned-value-date");
    alert(nid);
});
